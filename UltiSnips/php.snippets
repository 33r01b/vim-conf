priority -50

snippet class "Class declaration template" b
<?php

declare(strict_types=1);

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

class `!p snip.rv = snip.basename`$2
{
    $0
}
endsnippet

snippet aclass "Abstract Class" b
<?php

declare(strict_types=1);

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

abstract class `!p snip.rv = snip.basename`$2
{
    $0
}
endsnippet

snippet interface "Interface" b
<?php

declare(strict_types=1);

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

interface `!p snip.rv = snip.basename`
{
    $0
}
endsnippet

snippet trait "Trait declaration template" b
<?php

namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

trait `!p snip.rv = snip.basename`
{
    $0
}
endsnippet

snippet construct "__construct()" b
/**
 * @param ${1/, /\n     * \@param /g}
 */
public function __construct(${1:$dependencies})
{${1/\w* ?\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
}
$0
endsnippet

snippet gm "PHP Class Getter" b
public function get${1/\w+\s*/\u$0/}(): ${2:int}
{
    return $this->$1;
}
endsnippet

snippet sm "PHP Class Setter" b

public function set${1/\w+\s*/\u$0/}(${2:int} $$1): void
{
    $this->$1 = $$1;
}
endsnippet

snippet gs "PHP Class Getter Setter" b
public function get${1/\w+\s*/\u$0/}(): ${2:int}
{
    return $this->$1;
}

public function set${1/\w+\s*/\u$0/}($2 $$1): void
{
    $this->$1 = $$1;
}
endsnippet

snippet pub "Public function" b
public function ${1:name}(${2:int $param}): ${3:void}
{
    $0
}
endsnippet

snippet pro "Protected function" b
protected function ${1:name}(${2:int $param}): ${3:void}
{
    $0
}
endsnippet

snippet pri "Private function" b
private function ${1:name}(${2:int $param}): ${3:void}
{
    $0
}
endsnippet

snippet pubs "Public static function" b
public static function ${1:name}(${2:int $param}): ${3:void}
{
    $0
}
endsnippet

snippet pros "Protected static function" b
protected static function ${1:name}(${2:int $param}): ${3:void}
{
    $0
}
endsnippet

snippet pris "Private static function" b
private static function ${1:name}(${2:int $param}): ${3:void}
{
    $0
}
endsnippet

snippet lambda "anonymous function" b
function (${1:array} $${2:param}): ${3:$1} {
    $0
}
endsnippet

snippet fu "Function snip" b
function ${1:name}(${2:array} $${3:param}): ${4:$2} {
{
    $0
}
endsnippet

snippet new "New class instance" b
$${1:variableName} = new ${2:${1/\w+\s*/\u$0/}}($3);
$0
endsnippet

snippet ns "namespace declaration" b
namespace ${1:`!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};
endsnippet

snippet foreach "foreach" b
foreach ($1 as $2) {
    $0
}
endsnippet

snippet for "for" b
for ($i = 0; $i < $1; $i++) {
    $0
}
endsnippet


# PHPUnit snippets

snippet testcase "class XYZTest extends \PHPUnit_Framework_TestCase { ... }"
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`;

class `!p
snip.rv = re.match(r'.*(?=\.)', fn).group()
` extends \PHPUnit_Framework_TestCase
{
	public function test$1()
	{
		${0:${VISUAL}}
	}
}
endsnippet


snippet testcase6 "class XYZTest extends TestCase { ... }"
<?php

namespace `!p
relpath = os.path.relpath(path)
m = re.search(r'[A-Z].+(?=/)', relpath)
if m:
	snip.rv = m.group().replace('/', '\\')
`;

use PHPUnit\Framework\TestCase;

class `!p
snip.rv = re.match(r'.*(?=\.)', fn).group()
` extends TestCase
{
	public function test$1()
	{
		${0:${VISUAL}}
	}
}
endsnippet

let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <BS> <Plug>(PearTreeBackspace)
inoremap <buffer> <silent> <expr> <Plug>(PearTreeSpace) pear_tree#insert_mode#Space()
inoremap <buffer> <silent> <expr> <Plug>(PearTreeJNR) pear_tree#insert_mode#JumpNReturn()
inoremap <buffer> <silent> <expr> <Plug>(PearTreeJump) pear_tree#insert_mode#JumpOut()
inoremap <buffer> <silent> <expr> <Plug>(PearTreeExpandOne) pear_tree#insert_mode#ExpandOne()
inoremap <buffer> <silent> <expr> <Plug>(PearTreeFinishExpansion) pear_tree#insert_mode#Expand()
inoremap <buffer> <silent> <expr> <Plug>(PearTreeExpand) pear_tree#insert_mode#PrepareExpansion()
inoremap <buffer> <silent> <expr> <Plug>(PearTreeBackspace) pear_tree#insert_mode#Backspace()
inoremap <buffer> <silent> <expr> <Plug>(PearTreeCloser_}) pear_tree#insert_mode#HandleCloser('}')
inoremap <buffer> <silent> <expr> <Plug>(PearTreeOpener_{) pear_tree#insert_mode#TerminateOpener('{')
inoremap <buffer> <silent> <expr> <Plug>(PearTreeCloser_)) pear_tree#insert_mode#HandleCloser(')')
inoremap <buffer> <silent> <expr> <Plug>(PearTreeOpener_() pear_tree#insert_mode#TerminateOpener('(')
inoremap <buffer> <silent> <expr> <Plug>(PearTreeOpener_') pear_tree#insert_mode#TerminateOpener('''')
inoremap <buffer> <silent> <expr> <Plug>(PearTreeCloser_]) pear_tree#insert_mode#HandleCloser(']')
inoremap <buffer> <silent> <expr> <Plug>(PearTreeOpener_[) pear_tree#insert_mode#TerminateOpener('[')
inoremap <buffer> <silent> <expr> <Plug>(PearTreeOpener_") pear_tree#insert_mode#TerminateOpener('"')
inoremap <buffer> <silent> <expr> <Plug>(PearTreeOpener_`) pear_tree#insert_mode#TerminateOpener('`')
nnoremap <buffer> <silent>  :call go#def#StackPop(v:count1)
nnoremap <buffer> <silent> ] :call go#def#Jump("split", 0)
nnoremap <buffer> <silent>  :call go#def#Jump("split", 0)
nnoremap <buffer> <silent>  :GoDef
xnoremap <buffer> <silent> [[ :call go#textobj#FunctionJump('v', 'prev')
onoremap <buffer> <silent> [[ :call go#textobj#FunctionJump('o', 'prev')
nnoremap <buffer> <silent> [[ :call go#textobj#FunctionJump('n', 'prev')
nmap <buffer> \hp <Plug>(GitGutterPreviewHunk)
nmap <buffer> \hu <Plug>(GitGutterUndoHunk)
nmap <buffer> \hs <Plug>(GitGutterStageHunk)
xmap <buffer> \hs <Plug>(GitGutterStageHunk)
xnoremap <buffer> <silent> ]] :call go#textobj#FunctionJump('v', 'next')
onoremap <buffer> <silent> ]] :call go#textobj#FunctionJump('o', 'next')
nnoremap <buffer> <silent> ]] :call go#textobj#FunctionJump('n', 'next')
xnoremap <buffer> <silent> ac :call go#textobj#Comment('a')
onoremap <buffer> <silent> ac :call go#textobj#Comment('a')
xnoremap <buffer> <silent> af :call go#textobj#Function('a')
onoremap <buffer> <silent> af :call go#textobj#Function('a')
nnoremap <buffer> <silent> g<LeftMouse> <LeftMouse>:GoDef
nnoremap <buffer> <silent> gd :GoDef
xnoremap <buffer> <silent> ic :call go#textobj#Comment('i')
onoremap <buffer> <silent> ic :call go#textobj#Comment('i')
xnoremap <buffer> <silent> if :call go#textobj#Function('i')
onoremap <buffer> <silent> if :call go#textobj#Function('i')
nnoremap <buffer> <silent> <C-T> :call go#def#StackPop(v:count1)
nnoremap <buffer> <silent> <C-W>] :call go#def#Jump("split", 0)
nnoremap <buffer> <silent> <C-W><C-]> :call go#def#Jump("split", 0)
nnoremap <buffer> <silent> <C-LeftMouse> <LeftMouse>:GoDef
nnoremap <buffer> <silent> <C-]> :GoDef
imap <buffer> <nowait>  <Plug>(PearTreeFinishExpansion)
imap <buffer>  <Plug>(PearTreeFinishExpansion)
imap <buffer> " <Plug>(PearTreeOpener_")
imap <buffer> ' <Plug>(PearTreeOpener_')
imap <buffer> ( <Plug>(PearTreeOpener_()
imap <buffer> ) <Plug>(PearTreeCloser_))
imap <buffer> [ <Plug>(PearTreeOpener_[)
imap <buffer> ] <Plug>(PearTreeCloser_])
imap <buffer> ` <Plug>(PearTreeOpener_`)
imap <buffer> { <Plug>(PearTreeOpener_{)
imap <buffer> } <Plug>(PearTreeCloser_})
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=120
setlocal comments=s1:/*,mb:*,ex:*/,://
setlocal commentstring=//\ %s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=inc
setlocal conceallevel=2
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal cursorline
setlocal cursorlineopt=both
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'go'
setlocal filetype=go
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=1
setlocal foldmarker={{{,}}}
setlocal foldmethod=indent
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=cq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=-1
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GoIndent(v:lnum)
setlocal indentkeys=0{,0},0),0],:,0#,!^F,o,O,e,<:>,0=},0=)
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=go#complete#Complete
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal scrolloff=-1
setlocal shiftwidth=4
setlocal noshortname
setlocal showbreak=
setlocal sidescrolloff=-1
setlocal signcolumn=yes
setlocal smartindent
setlocal softtabstop=4
setlocal spell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en,ru
setlocal statusline=%{lightline#link()}%#LightlineLeft_active_0#%(\ %{lightline#mode()}\ %)%{(&paste)?\"|\":\"\"}%(\ %{&paste?\"PASTE\":\"\"}\ %)%#LightlineLeft_active_0_1#%#LightlineLeft_active_1#%(\ %{gitbranch#name()}\ %)%{gitbranch#name()!=#\"\"&&((&readonly)||1||(&modified||!&modifiable)||NearestMethodOrFunction()!=#\"\")?\"|\":\"\"}%(\ %R\ %)%{(&readonly)&&(1||(&modified||!&modifiable)||NearestMethodOrFunction()!=#\"\")?\"|\":\"\"}%(\ %t\ %)%{(&modified||!&modifiable)||NearestMethodOrFunction()!=#\"\"?\"|\":\"\"}%(\ %M\ %)%{(&modified||!&modifiable)&&(NearestMethodOrFunction()!=#\"\")?\"|\":\"\"}%(\ %{NearestMethodOrFunction()}\ %)%#LightlineLeft_active_1_2#%#LightlineMiddle_active#%=%#LightlineRight_active_2_3#%#LightlineRight_active_2#%(\ %{&ff}\ %)%{1||1?\"|\":\"\"}%(\ %{&fenc!=#\"\"?&fenc:&enc}\ %)%{1?\"|\":\"\"}%(\ %{&ft!=#\"\"?&ft:\"no\ ft\"}\ %)%#LightlineRight_active_1_2#%#LightlineRight_active_1#%(\ %3p%%\ %)%#LightlineRight_active_0_1#%#LightlineRight_active_0#%(\ %3l:%-2v\ %)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=1500
if &syntax != 'go'
setlocal syntax=go
endif
setlocal tabstop=4
setlocal tagcase=
setlocal tagfunc=
setlocal tags=
setlocal termwinkey=
setlocal termwinscroll=10000
setlocal termwinsize=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal varsofttabstop=
setlocal vartabstop=
setlocal wincolor=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
10
normal! zo
11
normal! zo
17
normal! zo
18
normal! zo
let s:l = 3 - ((2 * winheight(0) + 24) / 49)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
3
normal! 0
let &so = s:so_save | let &siso = s:siso_save
nohlsearch
doautoall SessionLoadPost
" vim: set ft=vim :
